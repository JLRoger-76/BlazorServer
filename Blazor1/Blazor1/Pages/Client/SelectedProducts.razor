@using Blazor1.Data;
@using Blazor1.Services;
@using System.Text.Json;
<!-- Button trigger modal -->
<button id="cartButton" type="button" class="button button-success" @onclick="@ModalShow">Panier<span class="oi oi-cart" aria-hidden="true"></span>:@total €</button>
@if (showModal)
{
    <div class="modal fade show" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog" @onclick="@ModalCancel">
        <div class="modal-dialog modal-lg" @onclick:stopPropagation="true">
            <div class="modal-content">
                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">Mon Panier</h4>
                    <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    @if (stockProducts != null)
                    {
                        <table id="listCart">
                            <thead>
                                <tr>
                                    <th>Nom</th>
                                    @if (Transact == "Demande" || Transact == "Distribution")
                                    {
                                        <th>Stock Parent</th>
                                    }

                                    @if (Transact == "Distribution")
                                    {
                                        <th>Demande</th>
                                    }
                                    else
                                    {
                                        <th>Stock</th>
                                    }
                                    <th>Quantite</th>
                                    <th>Prix Unit</th>
                                    <th>Prix</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody id="bodyListCart">
                                @foreach (StockProduct stockProduct in stockProducts)
                                {
                                    <tr>
                                        <td>@stockProduct.Product.Name</td>
                                        @if (Transact == "Demande" || Transact == "Distribution")
                                        {
                                            <td>@stockProduct.ParentStockQuantity</td>
                                        }

                                        @if (Transact == "Distribution")
                                        {
                                            <td>@stockProduct.StockQuery</td>
                                        }
                                        else
                                        {
                                            <td>@stockProduct.StockQuantity</td>
                                        }
                                        <td><input style="width:5rem !important;" type="number" @onchange="e => OnQuantityChange(stockProduct.ProductId, e)" value=@stockProduct.StockEntry min="1"></td>
                                        <td align="right" class="punit">@stockProduct.Product.Price €</td>
                                        <td align="right" class="price">@(stockProduct.Product.Price * stockProduct.StockEntry) €</td>
                                        <td><button type="button" class="button button-danger" @onclick="@(() => OnDelete(stockProduct.ProductId))"><span class="oi oi-trash" aria-hidden="true"></span></button></td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td>Total</td>
                                    <td align="right" id="total">@total €</td>
                                    <td>
                                        <button type="button" class="button button-success" @onclick="@(() => OnSave())">Enregistrer</button>
                                    </td>
                                </tr>
                            </tfoot>
                        </table>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
        [CascadingParameter]
        protected StockProduct SelectedProduct { get; set; }
        [CascadingParameter]
        protected string Transact { get; set; }

    //popup modal Cart
    protected decimal total = 0;
    protected bool showModal = false;
    protected void ModalShow() => showModal = true;
    protected void ModalCancel() => showModal = false;
    protected void ModalOk() => showModal = false;

    [Inject] StockProductService StockProductService { get; set; }
    [Inject] SaleService SaleService { get; set; }
    [Inject] SaleProductService SaleProductService { get; set; }

    protected List<StockProduct> stockProducts = new();
    protected StockProduct parentStockProduct = new();

    protected override async void OnParametersSet()
    {
        if (SelectedProduct != null)
        {
            if (!stockProducts.Exists(s => s.ProductId == SelectedProduct.ProductId))
            {
                parentStockProduct = await StockProductService.GetStockProduct2Async("1&" + SelectedProduct.ProductId);
                SelectedProduct.ParentStockQuantity = parentStockProduct.StockQuantity;
                SelectedProduct.StockEntry = 1;
                stockProducts.Add(SelectedProduct);
                SetTotal();

            }
        }
    }
    protected void OnQuantityChange(int id, ChangeEventArgs e)
    {
        stockProducts.Find(e => e.ProductId == id).StockEntry = int.Parse(e.Value.ToString());
        SetTotal();

    }

    protected void OnDelete(int id)
    {
        var itemToDelete = stockProducts.Single(s => s.ProductId == id);
        stockProducts.Remove(itemToDelete);
        SetTotal();

    }
    protected void SetTotal()
    {
        total = 0;
        foreach (StockProduct stockProduct in stockProducts)
        {
            total += (decimal)stockProduct.Product.Price * stockProduct.StockEntry;
        }
    }
    protected async void OnSave()
    {
        string jsonString = JsonSerializer.Serialize(stockProducts);
        Console.WriteLine(jsonString);
        switch (Transact)
        {
            case "Demande":
                foreach (StockProduct stockProduct in stockProducts)
                {
                    stockProduct.StockQuery += stockProduct.StockEntry;
                    await StockProductService.UpdateStockProductAsync(stockProduct);
                }
                break;
            case "Distribution":
                foreach (StockProduct stockProduct in stockProducts)
                {
                    stockProduct.StockQuantity += stockProduct.StockEntry;
                    stockProduct.StockQuery = Math.Max(stockProduct.StockQuery - stockProduct.StockEntry, 0);
                    await StockProductService.UpdateStockProductAsync(stockProduct);

                    // diminu le stock du parent
                    parentStockProduct = await StockProductService.GetStockProduct2Async("1&" + stockProduct.ProductId);
                    parentStockProduct.StockQuantity -= stockProduct.StockEntry;
                    await StockProductService.UpdateStockProductAsync(parentStockProduct);
                }
                break;
            case "Ajout":
                foreach (StockProduct stockProduct in stockProducts)
                {
                    parentStockProduct = new();
                    parentStockProduct.ProductId = stockProduct.ProductId;
                    parentStockProduct.StockId = stockProduct.StockId;
                    parentStockProduct.StockQuery = stockProduct.StockEntry;
                    parentStockProduct.StockQuantity = 0;
                    await StockProductService.InsertStockProductAsync(parentStockProduct);

                    //   string jsonString = JsonSerializer.Serialize(parentStockProduct);
                    //   Console.WriteLine(jsonString);
                }
                break;
            
            case "Vente":
                foreach (StockProduct stockProduct in stockProducts)
                {
                    stockProduct.StockQuantity -= stockProduct.StockEntry;
                    await StockProductService.UpdateStockProductAsync(stockProduct);
                }
                break;
            case "Inventaire":
                foreach (StockProduct stockProduct in stockProducts)
                {
                    stockProduct.StockQuantity = stockProduct.StockEntry;
                    await StockProductService.UpdateStockProductAsync(stockProduct);
                }
                break;
            default:
                Console.WriteLine("Not Known");
                break;
        }

        stockProducts.Clear();
        SetTotal();
        StateHasChanged();
    }
}
