@using Blazor1.Data;
@using Blazor1.Services;
@using System.Text.Json;

<h3>Liste des Produits</h3>

<CascadingValue Value=@SelectedProduct>
    <CascadingValue Value=@Transact>
        <SelectedProducts/>
    </CascadingValue>
</CascadingValue>

@if (stockProducts == null)
{
    <p><em>Chargement...</em></p>
}
else
{
    @if (startPage > displayedPages)
    {
        <button type="button" @onclick="@(OnPrevPage)" class="button button-info">Prev</button>
    }
    @for (int i = startPage; i <= Math.Min(displayedPages + startPage - 1, (productsCount + Parameters.ProductsByPage - 1) / Parameters.ProductsByPage); i++)
    {
        var pageNumber = i;
        <button type="button" @onclick="@(() => OnPage(pageNumber))" class="button button-info">@i</button>
    }
    @if ((productsCount + Parameters.ProductsByPage - 1) / Parameters.ProductsByPage >= startPage + displayedPages)
    {
        <button type="button" @onclick="@(OnNextPage)" class="button button-info">Next</button>
    }
    <div class="cardrow">
        @foreach (var stockProduct in displayedStockProducts)
        {
            <div class="cardcolumn">
                <div class="cardproduct" @onclick="@(() => OnCart(stockProduct))">
                    <img class="cardimg" src="/pictures/@stockProduct.Product.Image" alt="Card image cap">
                    <p> @stockProduct.Product.Name<br />@stockProduct.Product.Price €</p>
                    <p> @stockProduct.Product.Detail</p>
                </div>
            </div>
        }
    </div>
}

@code {
    [CascadingParameter]
    public Parameter Parameters { get; set; }
    [CascadingParameter]
    public string Transact { get; set; }

    [Inject] StockProductService StockProductService { get; set; }

    protected List<StockProduct> stockProducts = new();
    protected StockProduct SelectedProduct;
    protected StockProduct parent = new();
    protected List<StockProduct> displayedStockProducts = new();

    //pagination
    protected int startPage = 1;      //1ere page du paginateur
    protected int displayedPages = 10;//total pages du paginateur

    protected int productsCount = 0;
    protected override async Task OnParametersSetAsync()
    {
        string parameters = JsonSerializer.Serialize(Parameters);
        stockProducts = await StockProductService.GetStockProductsAsync();
        //stockProducts = await client.GetFromJsonAsync<List<StockProduct>>("api/StockProducts/P/" + parameters);
           string jsonString = JsonSerializer.Serialize(stockProducts);
           Console.WriteLine(jsonString);
        if (Parameters.Sort == 1)
        {
            stockProducts = stockProducts.OrderBy(s => s.Product.Name).ToList();
        }
        else
        {
            stockProducts = stockProducts.OrderByDescending(s => s.Product.Name).ToList();
        }
        productsCount = stockProducts.Count();
        OnPage(Parameters.CurrentPage);
    }
    protected void OnPage(int i)
    {
        Parameters.CurrentPage = i;
        displayedStockProducts = stockProducts
            .Skip((Parameters.CurrentPage - 1) * Parameters.ProductsByPage)
            .Take(Parameters.ProductsByPage).ToList();
    }
    protected void OnPrevPage()
    {
        startPage -= displayedPages;
    }
    protected void OnNextPage()
    {
        startPage += displayedPages;
    }

    protected void OnCart(StockProduct product)
    {
        SelectedProduct = product;
    }
}

