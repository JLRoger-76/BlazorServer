@using Blazor1.Data;
@using System.Text.Json;
@inject NavigationManager NavigationManager
@if (stockProducts == null)
{
    <p><em>Chargement...</em></p>
}
else
{
    @if (startPage > displayedPages)
    {
        <button type="button" @onclick="@(OnPrevPage)" class="button button-info">Prev</button>
    }
    @for (int i = startPage; i <= Math.Min(displayedPages + startPage - 1, (productsCount + Parameters.ProductsByPage - 1) / Parameters.ProductsByPage); i++)
    {
        var pageNumber = i;
        <button type="button" @onclick="@(() => OnPage(pageNumber))" class="button button-info">@i</button>
    }
    @if ((productsCount + Parameters.ProductsByPage - 1) / Parameters.ProductsByPage >= startPage + displayedPages)
    {
        <button type="button" @onclick="@(OnNextPage)" class="button button-info">Next</button>
    }
    <div class="container">
        <table>
            <thead>
                <tr>
                    <th scope="col">Nom</th>
                    <th scope="col">Prix</th>
                    <th scope="col">Stock</th>
                    @if (Transact == "Demande")
                    {
                        <th scope="col">Demande</th>
                        <th scope="col">Ajout/Retrait</th>
                    }
                    else if (Transact == "Ajout")
                    {
                        <th scope="col">Demande</th>
                    }
                    else
                    {
                        <th scope="col">Stock Reel</th>
                    }

                    <th scope="col">Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var stockProduct in displayedStockProducts)
                {
                    <tr>
                        <td scope="row" data-label="Nom">@stockProduct.Product.Name</td>
                        <td data-label="Prix">@stockProduct.Product.Price €</td>
                        <td data-label="Stock">@stockProduct.StockQuantity</td>
                        @if (Transact == "Demande")
                        {
                            <td data-label="Demande">@stockProduct.StockQuery</td>
                            <td data-label="Ajout">
                                <input style="width:5rem !important;" type="number"
                                       @onchange="e => OnQuantityChange(stockProduct.ProductId, e)"
                                       value=@stockProduct.StockEntry min="-@stockProduct.StockQuery">
                            </td>
                        }
                        else if (Transact == "Ajout")
                        {
                            <td data-label="Demande">
                                <input style="width:5rem !important;" type="number"
                                       @onchange="e => OnQuantityChange(stockProduct.ProductId, e)"
                                       value=@stockProduct.StockEntry min="1">
                            </td>
                        }
                        else//Inventaire
                        {
                            <td data-label="Stock reel">
                                <input style="width:5rem !important;" type="number"
                                       @onchange="e => OnQuantityChange(stockProduct.ProductId, e)"
                                       value=@stockProduct.StockEntry min="0">
                            </td>
                        }

                        <td>
                            <button type="button" class="button button-success" @onclick="@(() => OnSave(stockProduct))"> <span class="oi oi-loop-circular" aria-hidden="true"></span></button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}


@code {
    [CascadingParameter]
    public Parameter Parameters { get; set; }
    [CascadingParameter]
    public string Transact { get; set; }

    [Inject] StockProductService StockProductService { get; set; }

    protected List<StockProduct> stockProducts = new();
    protected List<StockProduct> displayedStockProducts = new();
    protected StockProduct newStockProduct = new();
    protected int userStockId;

    //pagination
    protected int startPage = 1;      //1ere page du paginateur
    protected int displayedPages = 10;//total pages du paginateur

    protected int productsCount = 0;

    protected override async Task OnParametersSetAsync()
    {
        userStockId = Parameters.StockId;
        if (Transact == "Ajout")
        {
            Parameters.StockId = 1;
        }
        string parameters = JsonSerializer.Serialize(Parameters);
        stockProducts = await StockProductService.GetStockProductPAsync(parameters);
        Parameters.StockId = userStockId;
        if (Parameters.Sort == 1)
        {
            stockProducts = stockProducts.OrderBy(s => s.Product.Name).ToList();
        }
        else
        {
            stockProducts = stockProducts.OrderByDescending(s => s.Product.Name).ToList();
        }
        productsCount = stockProducts.Count();
        OnPage(Parameters.CurrentPage);
    }

    protected void OnPage(int i)
    {
        Parameters.CurrentPage = i;
        displayedStockProducts = stockProducts
            .Skip((Parameters.CurrentPage - 1) * Parameters.ProductsByPage)
            .Take(Parameters.ProductsByPage).ToList();
    }
    protected void OnPrevPage()
    {
        startPage -= displayedPages;
    }
    protected void OnNextPage()
    {
        startPage += displayedPages;
    }

    protected void OnQuantityChange(int pid, ChangeEventArgs e)
    {
        stockProducts.Find(e => e.ProductId == pid).StockEntry = int.Parse(e.Value.ToString());
    }

    protected async Task OnSave(StockProduct stockProduct)
    {
        if (Transact == "Demande")
        {
            stockProduct.StockQuery += stockProduct.StockEntry;
            stockProduct.StockEntry = 0;
            await StockProductService.UpdateStockProductAsync(stockProduct);
        }
        else if (Transact == "Ajout")
        {
            newStockProduct.ProductId = stockProduct.ProductId;
            newStockProduct.StockId = Parameters.StockId;
            newStockProduct.StockQuery = stockProduct.StockEntry;
            await StockProductService.InsertStockProductAsync(newStockProduct);
            NavigationManager.NavigateTo("UserProduits/Demande/" + Parameters.StockId);
        }
        else// Transact="Inventaire
        {
            stockProduct.StockQuantity = stockProduct.StockEntry;
            stockProduct.StockEntry = 0;
            await StockProductService.UpdateStockProductAsync(stockProduct);
        }
    }
}

}
